{"version":3,"sources":["reportWebVitals.ts","app/app-reducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","api/cards-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","features/Login/Login.tsx","features/404/Error404.tsx","components/EditableSpan/EditableSpan.tsx","features/profile/Profile.tsx","features/newPassword/NewPassword.tsx","features/recovery/Recovery.tsx","features/registration/Registration.tsx","features/test/Test.tsx","features/navbar/Navbar.tsx","app/App.tsx","app/store.ts","index.tsx","features/navbar/navbar.module.css"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","status","error","isInitialized","setAppErrorAC","type","setAppStatusAC","Alert","React","forwardRef","props","ref","elevation","variant","ErrorSnackbar","useSelector","state","app","dispatch","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","authAPI","data","post","name","put","handleServerNetworkError","message","isLoggedIn","isRegistered","user","email","setIsLoggedInAC","payload","setEmailAC","Login","auth","navigate","useNavigate","formik","useFormik","initialValues","password","rememberMe","validate","values","errors","test","length","onSubmit","res","catch","resetForm","useEffect","handleSubmit","Grid","container","justifyContent","item","FormControl","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","checked","to","Button","Error404","EditableSpan","memo","console","log","useState","editMode","setEditMode","value","title","setTitle","onChange","e","currentTarget","autoFocus","onBlur","onDoubleClick","Profile","userName","nameFromInput","setNameFromInput","marginLeft","marginRight","marginTop","maxHeight","onClick","updateUsertAC","NewPassword","Recovery","setEmail","Registration","passwordConfirm","Test","Navbar","className","s","nav","pathname","App","_id","path","element","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.c605cf9c.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Dispatch} from \"redux\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized:false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"login/SET-IS-INITIALIZED--IN\":\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const setIsInitializedAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-INITIALIZED--IN', value} as const)\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized:boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setIsInitializedAC>\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import axios, {AxiosResponse} from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    baseURL:  \"https://neko-back.herokuapp.com/2.0\",\r\n    // baseURL: process.env.REACT_APP_BACK_URL || 'http://localhost:7542/2.0/',\r\n    withCredentials: true,\r\n})\r\n\r\n// api\r\nexport const cardsApi = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<UserDataResponseType>>(`/auth/login`, data)\r\n    },\r\n    register(data: RegisterParamsType) {\r\n        return instance.post<RegisterParamsType, ResponseRegisterType>(`/auth/register`, data)\r\n    },\r\n    me() {\r\n        return instance.post<{}, AxiosResponse<UserDataResponseType>>('/auth/me', {})\r\n    },\r\n    logout() {\r\n        return instance.delete<UniversalResponseType>(`/auth/me`)\r\n    },\r\n    updateUser(name: string) {\r\n        return instance.put<{name:string}, AxiosResponse<ResponseType>>('/auth/me', {name})\r\n    },\r\n    forgotPassword(email: string) {\r\n        const payload:ForgotPasswordParamsType={\r\n            email,\r\n            from: \"test-front-admin <d.r.semenovaa@yandex.ru>\",\r\n            message: `<div style=\"background-color: lime; padding: 15px\">password recovery link: <a href='https://DinaSem.github.io/Cards/set-new-password/$token$'>link</a></div>`\r\n\r\n        }\r\n        return instance.post <ForgotPasswordParamsType, AxiosResponse<UniversalResponseType>>('/auth/forgot', payload)\r\n    },\r\n    newPassword(data: NewtPasswordParamsType) {\r\n        return instance.post <NewtPasswordParamsType, AxiosResponse<UniversalResponseType>>('/auth/set-new-password', data)\r\n    },\r\n}\r\n\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\nexport type UserDataResponseType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n    created: Date;\r\n    updated: Date;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n    error?: string;\r\n}\r\n\r\nexport type ResponseRegisterType = {\r\n    addedUser: {} // чтобы посмотреть как выглядит созданный юзер\r\n    error?: string;\r\n}\r\nexport type UpdateUserResponseType = {\r\n    updatedUser: {}\r\n    error?: string\r\n}\r\nexport type UniversalResponseType = {\r\n    updatedUser: {}\r\n    error?: string\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\nexport type RegisterParamsType = {\r\n    email: string\r\n    password: string\r\n}\r\nexport type UpdateUserParamsType = {\r\n    name: string\r\n    // avatar?: string\r\n}\r\nexport type ForgotPasswordParamsType = {\r\n    email: string // кому восстанавливать пароль\r\n    from: string// можно указать разработчика фронта\r\n    message: string// хтмп-письмо, вместо $token$ бэк вставит токен\r\n}\r\nexport type NewtPasswordParamsType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/cards-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {\r\n    authAPI, ForgotPasswordParamsType,\r\n    LoginParamsType,\r\n    RegisterParamsType, UpdateUserParamsType,\r\n    UpdateUserResponseType,\r\n    UserDataResponseType\r\n} from \"../../api/cards-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    isRegistered: false,\r\n    user: null,\r\n    name: '',\r\n    email:''\r\n}\r\ntype InitialStateType = {\r\n    user: UserDataResponseType | null,\r\n    isLoggedIn: boolean\r\n    isRegistered: boolean\r\n    name: string\r\n    email: string\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, user: action.payload, isLoggedIn: true}\r\n        case \"login/SET-IS-REGISTRATED-IN\":\r\n            return {...state, isRegistered: action.value}\r\n        case \"login/SET-IS-LOGGED-OUT\":\r\n            return {\r\n                ...state,\r\n                user: null,\r\n                isLoggedIn: false\r\n            }\r\n        case \"login/UPDATE-USER\":\r\n            return {...state, name: action.name}\r\n        case \"login/SET-EMAIL\":\r\n            return {...state, email:action.email}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (payload: UserDataResponseType) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', payload} as const)\r\nexport const setIsRegisteredAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-REGISTRATED-IN', value} as const)\r\nexport const setIsLoggedOutAC = () =>\r\n    ({type: 'login/SET-IS-LOGGED-OUT'} as const)\r\nexport const updateUsertAC = (name: string) =>\r\n    ({type: 'login/UPDATE-USER', name} as const)\r\nexport const setEmailAC = (email: string) =>\r\n    ({type: 'login/SET-EMAIL', email} as const)\r\nexport const setNewPasswordAC = (email: string) =>\r\n    ({type: 'login/SET-NEW-PASSWORD', email} as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    // debugger\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data).then((res) => {\r\n        dispatch(setIsLoggedInAC(res.data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logOutTC = () => (dispatch: Dispatch) => {\r\n    // debugger\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout().then((res) => {\r\n        dispatch(setIsLoggedOutAC())\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const registerTC = (data: RegisterParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.register(data).then((res) => {\r\n        dispatch(setIsRegisteredAC(true))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.me()\r\n        .then((res) => {\r\n            if (res.data._id) {\r\n                dispatch(setIsLoggedInAC(res.data));\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            }\r\n            console.log('me', res.data)\r\n        })\r\n}\r\nexport const updateUserTC = (name: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    // debugger\r\n    authAPI.updateUser(name)\r\n        .then((res) => {\r\n            dispatch(updateUsertAC(name));\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const forgotPasswordTC = (email:string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    // debugger\r\n    authAPI.forgotPassword(email)\r\n        .then((res) => {\r\n            debugger\r\n            dispatch(setEmailAC(email));\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\n\r\n// types\r\ntype ActionsType =\r\n    | ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setIsRegisteredAC>\r\n    | ReturnType<typeof setIsLoggedOutAC>\r\n    | ReturnType<typeof updateUsertAC>\r\n    | ReturnType<typeof setEmailAC>\r\n    | ReturnType<typeof setNewPasswordAC>\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n\r\n","import React, {useEffect} from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Требуется email'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Неправильный формат email'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Требуется пароль'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Введите пароль больше 3 символов'\r\n            }\r\n\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            navigate('/')\r\n        } else return\r\n    }, [navigate, isLoggedIn])\r\n\r\n    return <form onSubmit={formik.handleSubmit}>\r\n        <Grid container justifyContent={'center'}>\r\n            <Grid item justifyContent={'center'}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox\r\n                                              checked={formik.values.rememberMe}\r\n                                              {...formik.getFieldProps('rememberMe')}/>}/>\r\n                        {/*<FormLabel>*/}\r\n                        {/*        <Link to={'recovery'}>Забыли пароль?</Link>*/}\r\n                        {/*</FormLabel>*/}\r\n                        <div>\r\n                            <Link to={'/recovery'}>Forgot Password</Link>\r\n                        </div>\r\n\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                        <h6>Already have an account?</h6>\r\n                        <div>\r\n                            <Link to={'/registration'}>Sign Up</Link>\r\n                        </div>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    </form>\r\n}","import React from 'react';\r\n\r\nexport const Error404 = () => {\r\n    return (\r\n        <div>\r\n            <h1>Error 404</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setIsLoggedOutAC, updateUserTC} from \"../Login/auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {UserDataResponseType} from \"../../api/cards-api\";\r\nimport {EditableSpan} from '../../components/EditableSpan/EditableSpan';\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\n\r\nconst Profile = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n    // @ts-ignore\r\n    const userName = useSelector<AppRootStateType, string >((state) => state.auth.user?.name)\r\n    const dispatch = useDispatch()\r\n    const [nameFromInput, setNameFromInput] = useState<string>('')\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(setIsLoggedOutAC())\r\n    }\r\n    const onClickNewNameHandler = () => {\r\n        // debugger\r\n        dispatch(updateUserTC(nameFromInput))\r\n    }\r\n    useEffect(() => {\r\n        userName && setNameFromInput(userName)\r\n\r\n    }, [userName])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div style={{\r\n                marginLeft: 'auto',\r\n                marginRight: 'auto',\r\n                marginTop: 'auto',\r\n                maxHeight: '100vh',\r\n                width: '6em'\r\n            }}><h1 style={{color: 'black'}}>Profile</h1></div>\r\n            <div>\r\n                <EditableSpan value={nameFromInput} onChange={setNameFromInput}/>\r\n                <button onClick={onClickNewNameHandler}>SAVE</button>\r\n            </div>\r\n            <button onClick={onClickHandler}>Logout</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\n\r\nconst NewPassword = () => {\r\n    return (\r\n        <div>\r\n          <h1>NewPassword</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NewPassword;","import React, {useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setEmailAC} from \"../Login/auth-reducer\";\r\n\r\nconst Recovery = () => {\r\n    const[email, setEmail]=useState<string>('')\r\n    const dispatch = useDispatch()\r\n\r\n    if(email){\r\n        dispatch(setEmailAC(email))\r\n    }\r\n    return (\r\n        <div>\r\n            <div style={{marginLeft: 'auto',\r\n                marginRight: 'auto',\r\n                marginTop: 'auto',\r\n                maxHeight:'100vh',\r\n                width: '6em'}}><h1>Recovery page</h1></div>\r\n            <input value={email} onChange={()=>setEmail(email)}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recovery;","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {registerTC} from \"../Login/auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\n\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nimport Button from \"@mui/material/Button\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    passwordConfirm?:string\r\n}\r\n\r\nexport const Registration = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            passwordConfirm: ''\r\n            // email: \"nya-admin@nya.nya\",\r\n            // password: \"1qazxcvBG\",\r\n            // passwordConfirm: \"1qazxcvBG\",\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Требуется email'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Неправильный формат email'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Требуется пароль'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Введите пароль больше 3 символов'\r\n            }\r\n            if (!values.passwordConfirm) {\r\n                errors.passwordConfirm = 'Повторите пароль'\r\n            } else if (values.password.length < 3) {\r\n                errors.passwordConfirm = 'Введите пароль больше 3 символов'\r\n            } else if (values.password!==values.passwordConfirm) {\r\n                errors.passwordConfirm = 'Пароли не совпадают'\r\n            }\r\n\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(registerTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    if(isLoggedIn){\r\n        return <Navigate to={'/'}/>\r\n    }\r\n    return <form onSubmit={formik.handleSubmit}>\r\n        <Grid container justifyContent={'center'}>\r\n            <Grid item justifyContent={'center'}>\r\n                <FormControl>\r\n\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                        <TextField type=\"password\"\r\n                                   label=\"Confirm password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('passwordConfirm')}\r\n                        />\r\n                        {formik.touched.passwordConfirm && formik.errors.passwordConfirm && <div style={{color: 'red'}}>{formik.errors.passwordConfirm}</div>}\r\n\r\n\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    </form>\r\n}","import React from 'react';\r\n\r\nconst Test = () => {\r\n    return (\r\n        <div>\r\n            <h1>Test</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Test;","import React from 'react';\r\nimport {Link, NavLink} from 'react-router-dom';\r\nimport s from './navbar.module.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\nconst Navbar = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n    return (\r\n        <div className={s.nav}>\r\n            <NavLink to={{pathname:'/'}}>Profile</NavLink>\r\n            {!isLoggedIn\r\n                ? <NavLink to={{pathname: 'login'}}>Login</NavLink>\r\n                : <NavLink to={{pathname: 'login'}}>Logout</NavLink>\r\n            }\r\n            <NavLink to={{pathname:'recovery'}}>Recovery</NavLink>\r\n            <Link to={'registration'}>Registration</Link>\r\n            <Link to={'test'}>Test</Link>\r\n            <Link to={{pathname:'404'}}>Error404</Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Error404} from \"../features/404/Error404\";\r\nimport Profile from \"../features/profile/Profile\";\r\nimport NewPassword from \"../features/newPassword/NewPassword\";\r\nimport Recovery from \"../features/recovery/Recovery\";\r\nimport {Registration} from \"../features/registration/Registration\";\r\nimport Test from \"../features/test/Test\";\r\nimport Navbar from \"../features/navbar/Navbar\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {initializeAppTC} from \"../features/Login/auth-reducer\";\r\n\r\n\r\n\r\nexport const App = () => {\r\n    const dispatch = useDispatch()\r\n    useEffect(()=>{\r\n        dispatch(initializeAppTC())\r\n    },[dispatch])\r\n\r\n    return <div className=\"App\">\r\n        <ErrorSnackbar/>\r\n        <Navbar/>\r\n        <Routes>\r\n            <Route path='/' element={<Profile/>}/>\r\n            <Route path='login' element={<Login/>}/>\r\n            <Route path='newpass' element={<NewPassword/>}/>\r\n            <Route path='recovery' element={<Recovery/>}/>\r\n            <Route path='registration' element={<Registration/>}/>\r\n            <Route path='new-pass' element={<NewPassword/>}/>\r\n            <Route path='test' element={<Test/>}/>\r\n            <Route path='404' element={<Error404/>}/>\r\n            <Route path='*' element={<Navigate to='/404'/>}/>\r\n        </Routes>\r\n\r\n    </div>\r\n}\r\n\r\n\r\n","\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth:authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {App} from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport { HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n        <Provider store={store}>\n            <HashRouter>\n                <App/>\n            </HashRouter>\n        </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"navbar_nav__1Uaxp\",\"navHeader\":\"navbar_navHeader__11THd\",\"navTitle\":\"navbar_navTitle__35jWX\",\"navBtn\":\"navbar_navBtn__1bG0o\",\"navLinks\":\"navbar_navLinks__2LyUu\",\"navCheck\":\"navbar_navCheck__2XmC7\",\"logo\":\"navbar_logo__36ywt\"};"],"sourceRoot":""}